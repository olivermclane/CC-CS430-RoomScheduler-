/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2022 Samuel Gratzl <sam@sgratzl.com>
 */

import { IBoxPlot, BoxplotStatsOptions } from '@sgratzl/boxplots';
export { IBoxPlot } from '@sgratzl/boxplots';
import { CSSProperties, PropsWithChildren } from 'react';

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
interface IBin<T> {
    /**
     * number of items in this bin
     */
    count: number;
    /**
     * color of this bin
     */
    color: string;
    /**
     * label of this bin
     */
    label: string;
    /**
     * start point of this bin
     */
    x0: T;
    /**
     * end point of this bin
     */
    x1: T;
    /**
     * the items in this bin
     */
    items: readonly T[];
}
interface ICommonStats<T> {
    /**
     * number of missing items in the array
     */
    readonly missing: number;
    /**
     * number of items in the array
     */
    readonly count: number;
    /**
     * in case of nested arrays what is the max nested depth
     */
    readonly depth: number;
    /**
     * the items in this stats
     */
    readonly items: readonly (T | readonly T[] | Set<T>)[];
    /**
     * number of missing items in the array
     */
    readonly flatMissing: number;
    /**
     * number of items in the array
     */
    readonly flatCount: number;
    /**
     * the items in this stats
     */
    readonly flatItems: readonly T[];
    /**
     * Converts a Stats object to a string.
     */
    [Symbol.toPrimitive](hint: 'default'): string;
    /**
     * Converts a Stats object to a string.
     */
    [Symbol.toPrimitive](hint: 'string'): string;
    /**
     * Converts a Stats object to a number.
     */
    [Symbol.toPrimitive](hint: 'number'): number;
    /**
     * Converts a Stats object to a string or number.
     *
     * @param hint The strings "number", "string", or "default" to specify what primitive to return.
     *
     * @throws {TypeError} If 'hint' was given something other than "number", "string", or "default".
     * @returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".
     */
    [Symbol.toPrimitive](hint: string): string | number;
}
interface IHistStats<T> extends ICommonStats<T> {
    /**
     * histogram
     */
    readonly hist: readonly Readonly<IBin<T>>[];
    /**
     * maximal items in a bin
     */
    readonly maxBin: IBin<T>;
    /**
     * converts a given (normalized) value to a color
     */
    color: (v: T) => string;
    /**
     * converts the given value to a label
     */
    format: (v: T) => string;
}
declare function toHistString<T>(hist: readonly Readonly<IBin<T>>[]): string;
interface INumericStats<T> extends IHistStats<T> {
    /**
     * minimal value in the array
     */
    readonly min: T;
    /**
     * maximum value in the array
     */
    readonly max: T;
    /**
     * median value in the array
     */
    readonly median: T;
    /**
     * converts the given value to a value between 0 and 1
     */
    scale: (v: T) => number;
    /**
     * invert operation given a number between 0 and 1 convert it back
     */
    invert: (v: number) => T;
}
declare function maxHistBin<T>(hist: readonly Readonly<IBin<T>>[]): Readonly<IBin<T>> | null;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * categorical statistics object
 */
interface ICategoricalStats extends IHistStats<string> {
    categories: readonly string[];
}
declare function isCategoricalStats(obj: unknown): obj is ICategoricalStats;
/**
 * helper function to create a formatter between a category value and a category label
 * @param categoryLabel tuple list of [category, label] to map
 */
declare function formatCategories(...categoryLabel: [string, string][]): (v: string) => string;
interface CategoricalStatsOptions {
    /**
     * defines the color function to convert a value to a color. By default colors are automatically assigned
     * @default defaultCategoricalColorScale
     */
    color?: (v: string) => string;
    /**
     * defines the label function
     */
    format?: (v: string) => string;
    /**
     * defines the list of categories
     */
    categories?: readonly string[];
}
declare type CategoricalValueLike = string | null | undefined | readonly (string | null | undefined)[] | Set<string>;
declare function categoricalStatsGenerator(options?: CategoricalStatsOptions): (arr: readonly CategoricalValueLike[]) => ICategoricalStats;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * on which granularity level is the histogram computed
 */
declare type DateHistGranularity = 'year' | 'month' | 'day' | 'decade';
interface IDateStats extends INumericStats<Date> {
    /**
     * the granularity in which the histogram is computed
     */
    readonly histGranularity: DateHistGranularity;
}
declare function isDateStats(obj: unknown): obj is IDateStats;
declare type DateFormatter = ((v: Date) => string) | {
    locales?: string | string[];
    options?: Intl.DateTimeFormatOptions;
};
/**
 * helper function to resolve a date formatter
 */
declare function resolveDateFormatter(format?: DateFormatter): (v: Date) => string;
interface DateStatsOptions {
    /**
     * converts a date to a string
     */
    color?: (v: Date) => string;
    /**
     * how to format the date
     */
    format?: DateFormatter;
    /**
     * defines the minimal date for the histogram
     */
    min?: Date;
    /**
     * defines the maximum date for the histogram
     */
    max?: Date;
    /**
     * defines the histogram granularity to uuse
     */
    histGranularity?: DateHistGranularity;
}
declare type DateLike = Date | null | undefined | readonly (Date | null | undefined)[] | Set<Date>;
declare function dateStatsGenerator(options?: DateStatsOptions): (arr: readonly DateLike[]) => IDateStats;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * computes the optimal number of bins for a given array length
 * @param length
 */
declare function getNumberOfBins(length: number): number;
/**
 * number statistics object
 */
interface INumberStats extends Omit<IBoxPlot, 'items'>, INumericStats<number> {
    /**
     * optional center for diverging
     */
    readonly center?: number;
}
declare function isNumberStats(obj: unknown): obj is INumberStats;
declare type NumberFormatter = ((v: number) => string) | {
    locales?: string | string[];
    options?: Intl.NumberFormatOptions;
};
/**
 * helper function to resolve the number formatter
 */
declare function resolveNumberFormatter(format?: NumberFormatter): (v: number) => string;
interface NumberStatsOptions extends BoxplotStatsOptions {
    /**
     * defines the minimum, otherwise derives it
     */
    min?: number;
    /**
     * defines the maximum, otherwise derives it
     */
    max?: number;
    /**
     * optional center for diverging histograms
     */
    center?: number;
    /**
     * fixes the number of bins
     */
    numberOfBins?: number;
    /**
     * color function to convert a number between 0...1 to a color
     */
    color?: (v: number) => string;
    format?: NumberFormatter;
}
declare type NumberLike = number | null | undefined | readonly (number | null | undefined)[] | Set<number> | Float32Array | Float64Array;
declare function numberStatsGenerator(options?: NumberStatsOptions): (arr: readonly NumberLike[] | Float32Array | Float64Array) => INumberStats;
declare function simpleStats(values: readonly number[]): {
    min: number;
    max: number;
    count: number;
    missing: number;
};

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * text statistics object
 */
interface ITextStats extends ICommonStats<string> {
    /**
     * number of unique text items
     */
    readonly unique: number;
    /**
     * top 10 most frequent text items sorted descending by count
     */
    readonly mostFrequent: readonly {
        value: string;
        count: number;
    }[];
    /**
     * converts a given string to a label
     */
    format: (v: string) => string;
}
declare function isTextStats(obj: unknown): obj is ITextStats;
interface TextStatsOptions {
    /**
     * number of most frequent items to include in the stats
     * @default 10
     */
    mostFrequentCount?: number;
    /**
     * defines the label function to use
     * @default (v) => v
     */
    format?: (v: string) => string;
}
/**
 * text statistics generator
 */
declare function textStatsGenerator(options?: TextStatsOptions): (arr: readonly string[]) => ITextStats;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
declare function defaultScale(v: number): number;
/**
 * a color scale returning a constant value
 */
declare function defaultConstantColorScale(): string;
/**
 * a color scale returning a constant value
 */
declare function defaultConstantDarkColorScale(): string;
/**
 * inverts the give color scale by handing in an inverted value (1-v)
 */
declare function invertColorScale(scale: (v: number) => string): (v: number) => string;
/**
 * default numeric color scale converting a number between 0..1 to a color
 */
declare function defaultColorScale(v: number): string;
declare function defaultColorScale2(v: number): string;
/**
 * default diverging numeric color scale converting a number between 0..1 to a color where 0.5 is the center
 */
declare function defaultDivergingColorScale(v: number): string;
/**
 * default numeric color scale converting a number between 0..1 to a color for dark themes
 */
declare const defaultDarkColorScale: (v: number) => string;
declare const defaultDarkColorScale2: (v: number) => string;
declare function defaultDivergingDarkColorScale(v: number): string;
/**
 * helper function to assign categorical values to colors
 * @param colors color array to assign
 * @param start offset in the array to start
 */
declare function autoAssignColors(colors: readonly string[], start?: number): (v: string) => string;
declare const schemeTableau10: string[];
/**
 * default
 */
declare function defaultCategoricalColorScale(): (v: string) => string;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
declare function normalize(min: number, max: number): (v: number) => number;
/**
 * helper function to invert the normalization to a given min/max range
 */
declare function deNormalize(min: number, max: number): (v: number) => number;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CommonProps {
    className?: string;
    style?: CSSProperties;
}

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface DateAxisProps extends CommonProps {
    format?: DateFormatter;
    labels: readonly Date[];
}
interface NumberAxisProps extends CommonProps {
    format?: NumberFormatter;
    labels: readonly number[];
}
interface TextAxisProps extends CommonProps {
    labels: readonly string[];
}
declare type ArrayAxisProps = DateAxisProps | NumberAxisProps | TextAxisProps;
/**
 * renders a summary axis
 */
declare function ArrayAxis(props: ArrayAxisProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const FILTER_RANGE_I18N_EN: {
    filterRangeMinFilter: string;
    filterRangeMaxFilter: string;
};
interface FilterRangeSliderProps<T> {
    /**
     * stats to render
     */
    s: INumericStats<T>;
    /**
     * set the filter
     */
    setFilter: (value?: [T | null, T | null]) => void;
    /**
     * get current filter value
     */
    filterValue: [T | null, T | null];
    i18n?: Partial<typeof FILTER_RANGE_I18N_EN>;
}
declare function FilterRangeWrapper<T>(props: PropsWithChildren<{
    s: INumericStats<T> & {
        readonly center?: T;
    };
    summary?: boolean;
} & FilterRangeSliderProps<T> & CommonProps>): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const BOXPLOT_I18N_EN: {
    boxplotMinimum: string;
    boxplot25Quantile: string;
    boxplotMedian: string;
    boxplotMean: string;
    boxplot75Quantile: string;
    boxplotMaximum: string;
    boxplotNrItems: string;
};
declare type BoxPlotScaled = Omit<IBoxPlot, 'items'> & {
    scale: (v: number) => number;
    format: (v: number) => string;
    color: (v: number) => string;
};
interface BoxPlotChartProps extends CommonProps {
    /**
     * the number boxplot statistics
     */
    s: BoxPlotScaled;
    /**
     * the optional stats containing the unfiltered stats in case of filtering operation applied
     * to the regular one
     */
    preFilter?: Omit<IBoxPlot, 'items'>;
    i18n?: Partial<typeof BOXPLOT_I18N_EN>;
}
/**
 * renders a boxplot as a SVG chart
 */
declare function BoxPlotChart(props: BoxPlotChartProps): JSX.Element;
/**
 * renders a boxplot as a SVG chart
 */
declare function BoxPlotChartVertical(props: BoxPlotChartProps): JSX.Element;
interface BoxPlotProps extends CommonProps {
    /**
     * the stats to render
     */
    s: BoxPlotScaled;
    /**
     * the optional stats containing the unfiltered stats in case of filtering operation applied
     * to the regular one
     */
    preFilter?: Omit<IBoxPlot, 'items'>;
    /**
     * whether to render it as a summary including labels
     */
    summary?: boolean;
    i18n?: Partial<typeof BOXPLOT_I18N_EN>;
}
/**
 * renders a boxplot
 */
declare function BoxPlot(props: BoxPlotProps): JSX.Element;
declare type FilterRangeBoxPlotProps = BoxPlotProps & FilterRangeSliderProps<number> & {
    i18n?: FilterRangeSliderProps<number>['i18n'] & BoxPlotProps['i18n'];
};
/**
 * renders a boxplot along with a range filter
 */
declare function FilterRangeBoxPlot(props: FilterRangeBoxPlotProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface BoxPlotArrayProps extends CommonProps {
    /**
     * the value to render
     */
    value: readonly Omit<IBoxPlot, 'items'>[];
    /**
     * optional scale to convert the number in the 0..1 range
     */
    scale?: (v: number) => number;
    /**
     * value or value to color function
     */
    color?: string | ((v: number, index: number) => string);
    /**
     * label for value to label function
     */
    format?: string | ((v: number, index: number) => string);
    i18n?: BoxPlotProps['i18n'];
}
declare function BoxPlotArray(props: BoxPlotArrayProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CategoricalColorProps extends CommonProps {
    /**
     * the value to render
     */
    value: string;
    /**
     * the color of the category or a function to convert the value to a color
     */
    color: string | ((v: string) => string);
    /**
     * the label of the category or a function to convert the value to a color
     */
    format?: string | ((v: string) => string);
}
declare function CategoricalColor(props: CategoricalColorProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface DateLabelProps extends CommonProps {
    /**
     * the date value to render
     */
    value: Date;
    /**
     * optional formatted date string or a function to compute the date string
     */
    format?: string | ((v: Date) => string);
}
/**
 * renders a date
 */
declare function DateLabel(props: DateLabelProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CommonNumbersProps extends CommonProps {
    /**
     * optional scale to convert the number in the 0..1 range
     */
    scale?: (v: number) => number;
    /**
     * value or value to color function
     */
    color?: string | ((v: number, index: number) => string);
    /**
     * label for value to label function
     */
    format?: string | ((v: number, index: number) => string);
}
interface HeatMap1DProps extends CommonNumbersProps {
    /**
     * the value to render
     */
    value?: readonly (number | null | undefined)[];
}
/**
 * renders a numeric 1d heatmap
 */
declare function HeatMap1D(props: HeatMap1DProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface HistogramProps<T> extends CommonProps {
    /**
     * the stats to render
     */
    s: IHistStats<T> & {
        readonly min?: T;
        readonly max?: T;
    };
    /**
     * the unfiltered stats in case the normal stats were filtered
     */
    preFilter?: IHistStats<T>;
    /**
     * the max bin size to use in case of synchronizing between charts
     */
    maxBin?: number;
    /**
     * whether bin title should only be the x0
     */
    label?: boolean;
    /**
     * whether to render it as a summary with range text
     */
    summary?: boolean;
}
/**
 * renders a number or date histogram
 */
declare function Histogram<T>(props: HistogramProps<T>): JSX.Element;
declare const FILTER_BIN_I18N_EN: {
    filterBin: string;
    removeFilterBin: string;
};
interface FilterBinHistogramProps<T> extends HistogramProps<T> {
    /**
     * sets the current filter
     */
    setFilter: (value?: T[]) => void;
    /**
     * current filter value
     */
    filterValue: T[];
    i18n?: Partial<typeof FILTER_BIN_I18N_EN>;
}
declare function FilterBinHistogram<T>(props: FilterBinHistogramProps<T>): JSX.Element;
declare type FilterRangeHistogramProps<T> = HistogramProps<T> & FilterRangeSliderProps<T>;
/**
 * renders a histogram along with a range filter
 */
declare function FilterRangeHistogram<T>(props: FilterRangeHistogramProps<T>): JSX.Element;
declare const FILTER_SET_I18N_EN: {
    filterMustNotSet: string;
    filterMustSet: string;
    filterMaybeSet: string;
};
interface FilterSetValue<T> {
    set: T;
    value: boolean;
}
interface FilterSetHistogramProps<T> extends HistogramProps<T> {
    /**
     * sets the current filter
     */
    setFilter: (value?: FilterSetValue<T>[]) => void;
    /**
     * current filter value
     */
    filterValue: FilterSetValue<T>[];
    i18n?: Partial<typeof FILTER_SET_I18N_EN>;
}
declare function FilterSetHistogram<T>(props: FilterSetHistogramProps<T>): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface LineChartProps extends HeatMap1DProps {
    /**
     * value line before filtering
     */
    preFilter?: readonly (number | null | undefined)[];
    /**
     * fill the line chart at the bottom
     */
    fill?: boolean;
    /**
     * use color gradient for stroke and fill
     */
    gradient?: boolean;
}
/**
 * renders a line chart
 */
declare function LineChart(props: LineChartProps): JSX.Element;
interface MultiLineChartProps extends CommonNumbersProps {
    value?: readonly (readonly (number | null | undefined)[])[];
    /**
     * fill the line chart at the bottom
     */
    fill?: boolean;
    /**
     * use color gradient for stroke and fill
     */
    gradient?: boolean;
}
/**
 * renders multiple line charts
 */
declare function MultiLineChart(props: MultiLineChartProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CommonNumberProps extends CommonProps {
    /**
     * optional scale to convert the number in the 0..1 range
     */
    scale?: (v: number) => number;
    /**
     * value or value to color function
     */
    color?: string | ((v: number) => string);
    /**
     * label for value to label function
     */
    format?: string | ((v: number) => string);
}
interface NumberBarProps extends CommonNumberProps {
    /**
     * the value to render
     */
    value: number;
}
/**
 * renders a numeric value along with a bar
 */
declare function NumberBar(props: NumberBarProps): JSX.Element;
interface DivergingNumberBarProps extends NumberBarProps {
    /**
     * @default 0.5 if no scale is given 0 otherwise
     */
    center?: number;
}
/**
 * renders a numeric value along with a diverging bar
 */
declare function DivergingNumberBar(props: DivergingNumberBarProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * renders a numeric value along with a colored rect
 */
declare function NumberColor(props: NumberBarProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * renders a numeric value along with a circle whose area is proportional to the value
 */
declare function NumberSymbol(props: NumberBarProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * a stacked value is a number wrapper that also contains information about its stack
 */
interface StackedValue {
    /**
     * the stacked bar value
     */
    readonly value: number;
    /**
     * the individual ratios (percentages) and their colors
     */
    readonly stack: readonly {
        ratio: number;
        color: string;
    }[];
    /**
     * Converts a StackedValue object to a string.
     */
    [Symbol.toPrimitive](hint: 'default'): string;
    /**
     * Converts a StackedValue object to a string.
     */
    [Symbol.toPrimitive](hint: 'string'): string;
    /**
     * Converts a StackedValue object to a number.
     */
    [Symbol.toPrimitive](hint: 'number'): number;
    /**
     * Converts a StackedValue object to a string or number.
     *
     * @param hint The strings "number", "string", or "default" to specify what primitive to return.
     *
     * @throws {TypeError} If 'hint' was given something other than "number", "string", or "default".
     * @returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".
     */
    [Symbol.toPrimitive](hint: string): string | number;
    valueOf(): number;
    toString(): string;
}
/**
 * wraps the given information as a StackedValue
 * @param value the value of the stacked bar
 * @param stack the ratios and colors of the stacked bar
 */
declare function asStackedValue(value: number, stack: readonly {
    ratio: number;
    color: string;
}[]): StackedValue;
/**
 * computes the StackedValue of the given parameters
 * @param stack the stack to compute the value
 */
declare function computeWeightedSum(stack: readonly number[]): StackedValue;
declare function computeWeightedSum(stack: readonly number[], colors: readonly string[]): StackedValue;
declare function computeWeightedSum(stack: readonly {
    value: number;
    weight?: number;
    color?: string;
}[], colors?: readonly string[]): StackedValue;
/**
 * returns a compute function for StackedValues
 * @param weights the stack to compute the value
 */
declare function computeWeightedSumFactory(weights: readonly number[]): (vs: readonly number[]) => StackedValue;
declare function computeWeightedSumFactory(weights: readonly number[]): (vs: readonly number[]) => StackedValue;
declare function computeWeightedSumFactory(weights: readonly number[], colors: readonly string[]): (vs: readonly number[]) => StackedValue;
declare function computeWeightedSumFactory(stack: readonly {
    weight: number;
    color?: string;
}[]): (vs: readonly number[]) => StackedValue;
interface StackedBarProps extends CommonProps {
    /**
     * optional scale to convert the number in the 0..1 range
     */
    scale?: (v: number) => number;
    /**
     * label for value to label function
     */
    format?: string | ((v: number) => string);
    /**
     * the value to render
     */
    value: StackedValue;
}
/**
 * renders a numeric value along with a bar
 */
declare function StackedBar(props: StackedBarProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface TextLabelProps extends CommonProps {
    /**
     * the date value to render
     */
    value: string;
    /**
     * optional formatted date string or a function to compute the string
     */
    format?: string | ((v: string) => string);
}
/**
 * renders a date
 */
declare function TextLabel(props: TextLabelProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const TEXT_SUMMARY_I18N_EN: {
    textSummaryItems: string;
    textSummaryUniqueItems: string;
    filterTextPlaceholder: string;
};
interface TextSummaryProps extends CommonProps {
    /**
     * the stats to render
     */
    s: ITextStats;
    /**
     * the optional stats containing the unfiltered stats in case of filtering operation applied
     * to the regular one
     */
    preFilter?: ITextStats;
    /**
     * whether to render it as a summary including labels
     */
    summary?: boolean;
    i18n?: Partial<typeof TEXT_SUMMARY_I18N_EN>;
}
declare function TextSummary(props: TextSummaryProps): JSX.Element;
interface FilterTextSummaryProps extends TextSummaryProps {
    /**
     * placeholder text in the input
     */
    placeholder?: (s: ITextStats) => string;
    /**
     * set the filter or null to reset it
     */
    setFilter: (value?: string) => void;
    /**
     * the current filter value
     */
    filterValue?: string;
}
declare function FilterTextSummary(props: FilterTextSummaryProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const UPSET_LINE_I18N_EN: {
    upsetHas: string;
    upsetHasAll: string;
    upsetHasSome: string;
    upsetHasNone: string;
    upsetHasNot: string;
};
declare type CategoricalSetValue = readonly string[] | Set<string>;
declare function isCategoricalSetValue(v: CategoricalSetValue | string | null | undefined): v is CategoricalSetValue;
declare function categoricalSetDegree(v?: CategoricalSetValue | null): number;
interface UpSetLineProps extends CommonProps {
    /**
     * the value to render
     */
    value: CategoricalSetValue;
    /**
     * the color of the category or a function to convert the value to a color
     */
    color?: string | ((v: string) => string);
    /**
     * the label of the category or a function to convert the value to a color
     */
    format?: string | ((v: string) => string);
    sets: readonly string[];
    i18n?: Partial<typeof UPSET_LINE_I18N_EN>;
}
declare function UpSetLine(props: UpSetLineProps): JSX.Element;
interface UpSetPartialLineProps extends CommonProps {
    /**
     * the value to render
     */
    value: readonly (boolean | null)[];
    /**
     * the color of the category or a function to convert the value to a color
     */
    color?: string | ((v: string) => string);
    /**
     * the label of the category or a function to convert the value to a color
     */
    format?: string | ((v: string) => string);
    sets: readonly string[];
    i18n?: Partial<typeof UPSET_LINE_I18N_EN>;
}
declare function UpSetPartialLine(props: UpSetPartialLineProps): JSX.Element;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function clsx(...args: (boolean | string | undefined | null)[]): string;
declare function mergeStyles(...args: (CSSProperties | undefined | null | boolean)[]): CSSProperties | undefined;
declare function format<T>(value: T, formatter?: string | ((v: T) => string)): string;
declare function toLocaleString(v?: number | Date | null): string;
declare function useI18N<T extends Record<string, string>>(original: T, overrides?: Partial<T>): Record<keyof T, (...args: unknown[]) => string>;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
declare const ALWAYS_TRUE: () => boolean;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * filter function by a set of filter values
 */
declare function filterByCategoricalSetFilter(filterValue?: readonly FilterSetValue<string>[] | null): (value?: readonly string[] | ReadonlySet<string> | null) => boolean;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
/**
 * a range numeric filter
 */
declare function filterByRangeFilter<T>(filterValue?: readonly [T, T] | null): (v?: T | null) => boolean;

/**
 * @lineup-lite/components
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
/**
 * filter function by a set of filter values
 */
declare function filterByCategoricalFilter(filterValue?: readonly string[] | null): (value?: string | null) => boolean;

export { ALWAYS_TRUE, ArrayAxis, ArrayAxisProps, BOXPLOT_I18N_EN, BoxPlot, BoxPlotArray, BoxPlotArrayProps, BoxPlotChart, BoxPlotChartProps, BoxPlotChartVertical, BoxPlotProps, BoxPlotScaled, CategoricalColor, CategoricalColorProps, CategoricalSetValue, CategoricalStatsOptions, CategoricalValueLike, CommonNumberProps, CommonNumbersProps, CommonProps, DateAxisProps, DateFormatter, DateHistGranularity, DateLabel, DateLabelProps, DateLike, DateStatsOptions, DivergingNumberBar, DivergingNumberBarProps, FILTER_BIN_I18N_EN, FILTER_RANGE_I18N_EN, FILTER_SET_I18N_EN, FilterBinHistogram, FilterBinHistogramProps, FilterRangeBoxPlot, FilterRangeBoxPlotProps, FilterRangeHistogram, FilterRangeHistogramProps, FilterRangeSliderProps, FilterRangeWrapper, FilterSetHistogram, FilterSetHistogramProps, FilterSetValue, FilterTextSummary, FilterTextSummaryProps, HeatMap1D, HeatMap1DProps, Histogram, HistogramProps, IBin, ICategoricalStats, ICommonStats, IDateStats, IHistStats, INumberStats, INumericStats, ITextStats, LineChart, LineChartProps, MultiLineChart, MultiLineChartProps, NumberAxisProps, NumberBar, NumberBarProps, NumberColor, NumberBarProps as NumberColorProps, NumberFormatter, NumberLike, NumberStatsOptions, NumberSymbol, NumberBarProps as NumberSymbolProps, StackedBar, StackedBarProps, StackedValue, TEXT_SUMMARY_I18N_EN, TextAxisProps, TextLabel, TextLabelProps, TextStatsOptions, TextSummary, TextSummaryProps, UPSET_LINE_I18N_EN, UpSetLine, UpSetLineProps, UpSetPartialLine, UpSetPartialLineProps, asStackedValue, autoAssignColors, categoricalSetDegree, categoricalStatsGenerator, clsx, computeWeightedSum, computeWeightedSumFactory, dateStatsGenerator, deNormalize, defaultCategoricalColorScale, defaultColorScale, defaultColorScale2, defaultConstantColorScale, defaultConstantDarkColorScale, defaultDarkColorScale, defaultDarkColorScale2, defaultDivergingColorScale, defaultDivergingDarkColorScale, defaultScale, filterByCategoricalFilter, filterByCategoricalSetFilter, filterByRangeFilter, format, formatCategories, getNumberOfBins, invertColorScale, isCategoricalSetValue, isCategoricalStats, isDateStats, isNumberStats, isTextStats, maxHistBin, mergeStyles, normalize, numberStatsGenerator, resolveDateFormatter, resolveNumberFormatter, schemeTableau10, simpleStats, textStatsGenerator, toHistString, toLocaleString, useI18N };
//# sourceMappingURL=index.d.ts.map
