/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2022 Samuel Gratzl <sam@sgratzl.com>
 */

import { CategoricalStatsOptions, ICategoricalStats, NumberStatsOptions, INumberStats, DateStatsOptions, IDateStats, TextStatsOptions, ITextStats, CommonProps, NumberFormatter, DateFormatter, CategoricalSetValue, StackedValue, ArrayAxisProps, FilterSetValue } from '@lineup-lite/components';
export { CategoricalStatsOptions, DateStatsOptions, ICategoricalStats, IDateStats, INumberStats, ITextStats, NumberStatsOptions, TextStatsOptions } from '@lineup-lite/components';
import { Renderer, HeaderProps, CellProps, Hooks, IdType, Row, ColumnInstance, Column, UseFiltersColumnOptions, UseGroupByColumnOptions, UseSortByColumnOptions, UseResizeColumnsColumnOptions, TableToggleAllRowsSelectedProps, Accessor } from 'react-table';
export { TableToggleAllRowsSelectedProps } from 'react-table';
import React, { ComponentType } from 'react';

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * generator for computing categorical stats
 */
declare function categoricalStats(options?: CategoricalStatsOptions): (arr: readonly string[], preFilter?: ICategoricalStats) => ICategoricalStats;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */
declare type UnknownObject = {
    [key: string]: unknown;
};
declare type AnyObject = object;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type StatsValue = any;
interface StatsType {
    (values: readonly unknown[], preFilterStats?: unknown): unknown;
}
interface UseStatsOptions {
}
interface UseStatsState {
}
interface UseStatsColumnOptions<D extends AnyObject = UnknownObject> {
    Summary?: Renderer<StatsProps<D>>;
    stats?: StatsType;
}
interface UseStatsInstanceProps {
}
interface UseStatsColumnProps {
    setStats: (updater: ((statsValue: StatsValue) => StatsValue) | StatsValue) => void;
    statsValue: StatsValue;
    preFilterStatsValue?: StatsValue;
}
declare type StatsProps<D extends AnyObject = UnknownObject> = HeaderProps<D> & {
    column: UseStatsColumnProps;
    i18n?: Record<string, string>;
};
declare type StatsCellProps<D extends AnyObject = UnknownObject> = CellProps<D> & {
    column: UseStatsColumnProps;
    i18n?: Record<string, string>;
};
declare type StatsAggregateArray<T> = T[] & {
    _aggregate?: <V>(gen: (vs: T[], preFilter?: V) => V, stats?: V) => unknown;
};
declare function statsAggregate<T>(v: T[]): T[];
declare function statsAggregateArray<T>(v: T[]): T[];
declare function useStats<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useStats {
    var pluginName: string;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type GroupingOptionsValue = any;
declare type GroupingOptions<D extends AnyObject> = Array<{
    id: IdType<D>;
    value: GroupingOptionsValue;
}>;
interface UseGroupingOptionsState<D extends AnyObject> {
    groupingOptions: GroupingOptions<D>;
}
interface UseGroupingOptionsColumnOptions<D extends AnyObject = UnknownObject> {
    /**
     * renderer used to render the group cell
     */
    Group?: Renderer<D>;
    /**
     * group by function for this column
     */
    groupBy?: UseGroupingOptionGroupingFunction<D>;
}
interface UseGroupingOptionGroupingFunction<D extends AnyObject = UnknownObject> {
    (rows: readonly Row<D>[], column: ColumnInstance<D>, options?: AnyObject): Record<string, Row<D>[]>;
}
interface UseGroupingOptionsInstanceProps {
    setGroupingOptions: (columnId: string, value: GroupingOptionsValue) => void;
}
interface UseGroupingOptionsColumnProps {
    setGroupingOptions: (value: GroupingOptionsValue) => void;
    groupingOptions: GroupingOptionsValue;
}
declare type GroupingOptionsProps<D extends AnyObject = UnknownObject> = HeaderProps<D> & {
    column: UseGroupingOptionsColumnProps;
};
declare type GroupingOptionsCellProps<D extends AnyObject = UnknownObject> = CellProps<D> & {
    column: UseGroupingOptionsColumnProps;
};
declare function useGroupingOptions<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useGroupingOptions {
    var pluginName: string;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * a lineup lite column description
 */
declare type LineUpLiteColumn<D extends AnyObject = UnknownObject> = Column<D> & UseFiltersColumnOptions<D> & UseGroupByColumnOptions<D> & UseSortByColumnOptions<D> & UseStatsColumnOptions<D> & UseResizeColumnsColumnOptions<D> & UseGroupingOptionsColumnOptions<D> & {
    canHide?: boolean;
    isSupport?: boolean;
    tooltip?: string;
    className?: string;
};

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function useRowSelectColumn<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useRowSelectColumn {
    var pluginName: string;
}
declare const USE_ROW_SELECT_COLUMN_I18N_EN: {
    selectGroup: string;
    unselectGroup: string;
    selectAll: string;
    unselectAll: string;
    selectRow: string;
    unselectRow: string;
};
interface UseSelectColumnTableOptions {
    /**
     * i18n customizations
     */
    i18n?: Partial<typeof USE_ROW_SELECT_COLUMN_I18N_EN>;
    /**
     * width of the select column
     * @default 20
     */
    selectColumnWidth?: number;
    selectCheckboxComponent?: React.ComponentType<TableToggleAllRowsSelectedProps>;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const USE_EXPAND_COLUMN_I18N_EN: {
    expandGroup: string;
    collapseGroup: string;
    expandAllGroups: string;
    collapseAllGroups: string;
};
interface UseRowExpandColumnTableOptions {
    /**
     * icon to use for the expand icon
     * @default 'â–¸'
     */
    icons?: {
        expandGroup?: ComponentType;
    };
    /**
     * i18n customizations
     */
    i18n?: Partial<typeof USE_EXPAND_COLUMN_I18N_EN>;
    /**
     * width of the expand column
     * @default 20
     */
    expandColumnWidth?: number;
}
declare function useRowExpandColumn<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useRowExpandColumn {
    var pluginName: string;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface UseRankRowProps {
    rank: number;
}
declare function useRowRankColumn<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useRowRankColumn {
    var pluginName: string;
}
interface UseRowRankColumnTableOptions {
    /**
     * width of the rank column
     * @default 40
     */
    rankColumnWidth?: number;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type SortingOptionsValue = any;
declare type SortingOptions<D extends AnyObject> = Array<{
    id: IdType<D>;
    value: SortingOptionsValue;
}>;
interface UseSortingOptionsState<D extends AnyObject> {
    sortingOptions: SortingOptions<D>;
}
interface UseSortingOptionsInstanceProps {
    setSortingOptions: (columnId: string, value: SortingOptionsValue) => void;
}
interface UseSortingOptionsColumnProps {
    setSortingOptions: (value: SortingOptionsValue) => void;
    sortingOptions: SortingOptionsValue;
}
declare type SortingOptionsProps<D extends AnyObject = UnknownObject> = HeaderProps<D> & {
    column: UseSortingOptionsColumnProps;
};
declare type SortingOptionsCellProps<D extends AnyObject = UnknownObject> = CellProps<D> & {
    column: UseSortingOptionsColumnProps;
};
declare function useSortingOptions<D extends AnyObject = UnknownObject>(hooks: Hooks<D>): void;
declare namespace useSortingOptions {
    var pluginName: string;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare const IndeterminateCheckbox: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLInputElement> & {
    indeterminate?: boolean | undefined;
} & React.RefAttributes<HTMLInputElement>>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * generator for computing number stats
 */
declare function numberStats(options?: NumberStatsOptions): (arr: readonly number[], preFilter?: INumberStats) => INumberStats;
declare type NumberArrayWithStats = number[] & {
    _stats?: INumberStats;
};
declare function computeArrayNumberStats(arr: NumberArrayWithStats, column?: ColumnInstance<UnknownObject> & Partial<UseStatsColumnOptions<UnknownObject> & UseStatsColumnProps>): INumberStats | null;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * generator for computing date stats
 */
declare function dateStats(options?: DateStatsOptions): (arr: readonly (Date | null)[], preFilter?: IDateStats) => IDateStats;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * generator for computing text stats
 */
declare function textStats(options?: TextStatsOptions): (arr: readonly string[], preFilter?: ITextStats) => ITextStats;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface BarRendererOptions extends CommonProps {
    scale?: (v: number) => number;
    color?: (v: number) => string;
    format?: NumberFormatter;
}
/**
 * Cell renderer for a number to be rendered as a a bar
 */
declare function BarRenderer<D extends UnknownObject, P extends CellProps<D, number>>(props: P): JSX.Element;
/**
 * factory for rendering numbers as a bar
 */
declare function BarRendererFactory<D extends UnknownObject, P extends CellProps<D, number>>(options?: BarRendererOptions): Renderer<P>;
interface DivergingBarRendererOptions extends BarRendererOptions {
    center?: number;
}
/**
 * Cell renderer for a number to be rendered as a a bar
 */
declare function DivergingBarRenderer<D extends UnknownObject, P extends CellProps<D, number>>(props: P): JSX.Element;
/**
 * factory for rendering numbers as a bar
 */
declare function DivergingBarRendererFactory<D extends UnknownObject, P extends CellProps<D, number>>(options?: DivergingBarRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type StatsPropsLike<T> = ({
    value: readonly T[];
    i18n?: Record<string, string>;
} & StatsCellProps<UnknownObject>) | StatsProps<UnknownObject>;
/**
 * checks whether the given value is missing
 * @param v value to check
 */
declare function isMissing(v: null | undefined | unknown): boolean;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface BoxPlotRendererOptions extends NumberStatsOptions, CommonProps {
}
declare function BoxPlotRenderer<P extends StatsPropsLike<number>>(props: P): JSX.Element;
declare function BoxPlotRendererFactory<P extends StatsPropsLike<number>>(options?: BoxPlotRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CategoricalRendererOptions extends CommonProps {
    color?: (v: string) => string;
    format?: (v: string) => string;
}
declare function CategoricalRenderer<D extends UnknownObject, P extends CellProps<D, string>>(props: P): JSX.Element;
declare function CategoricalRendererFactory<D extends UnknownObject, P extends CellProps<D, string>>(options?: CategoricalRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CategoricalHistogramRendererOptions extends CategoricalRendererOptions {
    maxBin?: number;
}
declare function CategoricalHistogramRenderer<P extends StatsPropsLike<string>>(props: P): JSX.Element;
declare function CategoricalHistogramRendererFactory<P extends StatsPropsLike<string>>(options?: CategoricalHistogramRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function ColorRenderer<D extends UnknownObject, P extends CellProps<D, number>>(props: P): JSX.Element;
declare function ColorRendererFactory<D extends UnknownObject, P extends CellProps<D, number>>(options?: BarRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface HistogramRendererOptions extends DateStatsOptions, CommonProps {
    maxBin?: number;
}
declare function DateHistogramRenderer<P extends StatsPropsLike<Date | null>>(props: P): JSX.Element;
declare function DateHistogramRendererFactory<P extends StatsPropsLike<Date | null>>(options?: HistogramRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface DateRendererOptions extends CommonProps {
    format?: DateFormatter;
}
declare function DateRenderer<D extends UnknownObject, P extends CellProps<D, Date>>(props: P): JSX.Element;
declare function DateRendererFactory<D extends UnknownObject, P extends CellProps<D, Date>>(options?: DateRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface NumberHistogramRendererOptions extends NumberStatsOptions, CommonProps {
    maxBin?: number;
}
declare function NumberHistogramRenderer<P extends StatsPropsLike<number>>(props: P): JSX.Element;
declare function NumberHistogramRendererFactory<P extends StatsPropsLike<number>>(options?: NumberHistogramRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function ProportionalSymbolRenderer<D extends UnknownObject, P extends CellProps<D, number>>(props: P): JSX.Element;
declare function ProportionalSymbolRendererFactory<D extends UnknownObject, P extends CellProps<D, number>>(options?: BarRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface TextSummaryRendererOptions extends CommonProps {
    format?: (v: string) => string;
    placeholder?: (s: ITextStats) => string;
}
declare function TextSummaryRenderer<P extends StatsPropsLike<string>>(props: P): JSX.Element;
declare function TextSummaryRendererFactory<P extends StatsPropsLike<string>>(options?: TextSummaryRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function GroupValueRenderer<D extends UnknownObject, P extends CellProps<D, unknown>>(props: P): JSX.Element;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CategoricalSetRendererOptions extends CategoricalRendererOptions {
    categories?: readonly string[];
}
declare function CategoricalSetRenderer<D extends UnknownObject, P extends CellProps<D, CategoricalSetValue>>(props: P): JSX.Element;
declare function CategoricalSetRendererFactory<D extends UnknownObject, P extends CellProps<D, CategoricalSetValue>>(options?: CategoricalSetRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface CategoricalSetHistogramRendererOptions extends CategoricalRendererOptions {
    maxBin?: number;
}
declare function CategoricalSetHistogramRenderer<P extends StatsPropsLike<string>>(props: P): JSX.Element;
declare function CategoricalSetHistogramRendererFactory<P extends StatsPropsLike<string>>(options?: CategoricalSetHistogramRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface HeatMap1DRendererOptions extends CommonProps {
    scale?: (v: number) => number;
    color?: (v: number) => string;
    format?: NumberFormatter;
}
/**
 * Cell renderer for a number to be rendered as a a HeatMap1D
 */
declare function HeatMap1DRenderer<D extends UnknownObject, P extends CellProps<D, number[]>>(props: P): JSX.Element;
/**
 * factory for rendering numbers as a HeatMap1D
 */
declare function HeatMap1DRendererFactory<D extends UnknownObject, P extends CellProps<D, number[]>>(options?: HeatMap1DRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface BoxPlotArrayRendererOptions extends NumberStatsOptions, CommonProps {
    maxBin?: number;
}
declare function BoxPlotArrayRenderer<P extends StatsPropsLike<number>>(props: P): JSX.Element;
declare function BoxPlotArrayRendererFactory<P extends StatsPropsLike<number>>(options?: BoxPlotArrayRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface TextRendererOptions extends CommonProps {
    format?: (v: string) => string;
}
declare function TextRenderer<D extends AnyObject, P extends CellProps<D, string>>(props: P): JSX.Element;
declare function TextRendererFactory<D extends AnyObject, P extends CellProps<D, string>>(options?: TextRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function computeStackedValue<D extends AnyObject = UnknownObject>(stack: readonly {
    col: keyof D | Accessor<D>;
    weight: number;
    color?: string;
}[], colors?: (v: string) => string): Accessor<D>;
interface StackedBarRendererOptions extends CommonProps {
    scale?: (v: number) => number;
    format?: NumberFormatter;
}
/**
 * Cell renderer for a number to be rendered as a a bar
 */
declare function StackedBarRenderer<D extends UnknownObject, P extends CellProps<D, StackedValue>>(props: P): JSX.Element;
/**
 * factory for rendering numbers as a stacked bar
 */
declare function StackedBarRendererFactory<D extends UnknownObject, P extends CellProps<D, StackedValue>>(options?: StackedBarRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface LineChartRendererOptions extends BarRendererOptions {
    fill?: boolean;
    gradient?: boolean;
}
declare function LineChartRenderer<D extends UnknownObject, P extends CellProps<D, (number | null | undefined)[]>>(props: P): JSX.Element;
declare function LineChartRendererFactory<D extends UnknownObject, P extends CellProps<D, (number | null | undefined)[]>>(options?: LineChartRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function MultiLineChartRenderer<D extends UnknownObject, P extends CellProps<D, (number | null | undefined)[][]>>(props: P): JSX.Element;
declare function MultiLineChartRendererFactory<D extends UnknownObject, P extends CellProps<D, (number | null | undefined)[][]>>(options?: LineChartRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type ArrayAxisRendererOptions = ArrayAxisProps | CommonProps;
declare function ArrayAxisRenderer<D extends UnknownObject, P extends StatsCellProps<D>>(props: P): JSX.Element;
declare function ArrayAxisRendererFactory<D extends UnknownObject, P extends StatsCellProps<D>>(options?: ArrayAxisRendererOptions): Renderer<P>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * filter function by a set of filter values
 * @param rows
 * @param ids
 * @param filterValue
 */
declare function categoricalFilter<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], ids: readonly IdType<D>[], filterValue: readonly string[]): Row<D>[];
declare namespace categoricalFilter {
    var autoRemove: (val: readonly string[]) => boolean;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * a range numeric filter
 */
declare function rangeFilter<D extends AnyObject = UnknownObject, T = unknown>(rows: readonly Row<D>[], ids: readonly string[], filterValue: readonly [T, T]): Row<D>[];
declare namespace rangeFilter {
    var autoRemove: (val: [unknown, unknown]) => boolean;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * filter function by a set of filter values
 * @param rows
 * @param ids
 * @param filterValue
 */
declare function categoricalSetFilter<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], ids: readonly IdType<D>[], filterValue: readonly FilterSetValue<string>[]): Row<D>[];
declare namespace categoricalSetFilter {
    var autoRemove: (val: readonly string[]) => boolean;
}

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function asColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D): C;
/**
 * defines a text column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asTextColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: TextStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a number column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asNumberColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: NumberStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a diverging number column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asDivergingNumberColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: NumberStatsOptions & {
    center?: number;
}): LineUpLiteColumn<D>;
/**
 * defines a number array column, each value is a number array
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asNumbersColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: NumberStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a number array column, each value is a number array shown as a line chart x = index, y=value
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asNumbersLineChartColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: NumberStatsOptions & ArrayAxisRendererOptions): LineUpLiteColumn<D>;
/**
 * defines a number column that is rendered as boxplot
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asNumberBoxPlotColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: NumberStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a categorical column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asCategoricalColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: CategoricalStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a categorical set column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asCategoricalSetColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: CategoricalStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a date column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asDateColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | keyof D, options?: DateStatsOptions): LineUpLiteColumn<D>;
/**
 * defines a number column
 * @param col property key or partial column Header and accessor
 * @param options additional options for statistics
 */
declare function asStackedNumberColumn<D extends AnyObject = UnknownObject, C extends Column<D> = Column<D>>(col: C | string, stack: readonly {
    col: keyof D | Accessor<D>;
    weight: number;
    color?: string;
}[], options?: NumberStatsOptions & {
    colors?: (v: string) => string;
}): LineUpLiteColumn<D>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type RowCompareFunction<O extends AnyObject = UnknownObject> = (a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string, options?: O) => number;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * sort helper to compare by a given column id
 * @param a first row
 * @param b second row
 * @param columnId column id
 */
declare function sortCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string): number;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * sort helper to compare by a given column id
 * @param a first row
 * @param b second row
 * @param columnId column id
 */
declare function sortSplitter<O extends AnyObject = UnknownObject>(rows: RowCompareFunction<O>, group: RowCompareFunction<O>): RowCompareFunction;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function categoricalGroupCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string): number;
/**
 * generates a comparator that sorts by the given set of category order
 */
declare function categoricalSort(categories: readonly string[]): RowCompareFunction;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function categoricalSetGroupCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string): number;
/**
 * generates a comparator that sorts by the given set of category order
 */
declare function categoricalSetCompare(categories?: readonly string[]): RowCompareFunction;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface NumberSortOptions {
    group: 'median' | 'min' | 'max' | 'mean' | 'q1' | 'q3';
    array: 'median' | 'min' | 'max' | 'mean' | 'q1' | 'q3';
}
declare function numberGroupCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string, options?: NumberSortOptions): number;
declare function numbersCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string, options?: NumberSortOptions): number;
declare function numberGroupCompareFactory(options: NumberSortOptions): RowCompareFunction<NumberSortOptions>;
declare function numbersCompareFactory(options: NumberSortOptions): RowCompareFunction<NumberSortOptions>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function textGroupCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string): number;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface DateSortOptions {
    group: 'median' | 'min' | 'max';
}
declare function dateGroupCompare(a: Row<UnknownObject>, b: Row<UnknownObject>, columnId: string, options?: DateSortOptions): number;
declare function dateGroupCompareFactory(options: DateSortOptions): RowCompareFunction<DateSortOptions>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * helper function to defer the grouping logic to the column
 * @param rows
 * @param columnId
 */
declare function columnSpecificGroupByFn<D extends AnyObject = UnknownObject>(rows: Row<D>[], columnId: IdType<D>): Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function categoricalGroupBy<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], column: ColumnInstance<D>): Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare type DateGroupByGranularity = 'century' | 'decade' | 'year' | 'quarter' | 'month' | 'week' | 'day_of_week' | 'day_of_month' | 'day_of_year' | 'hour' | 'minute' | 'second';
interface DateGroupByOptions {
    /**
     * granularity level for the grouping
     */
    granularity: DateGroupByGranularity;
    /**
     * whether circular occurrences should be in the same bin
     * e.g. granularity = month
     * circular: 01.2018 == 01.2017
     * not circular: 01.2018 != 01.2017
     */
    circular: boolean;
}
declare function dateGroupBy<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], column: ColumnInstance<D>, options?: DateGroupByOptions): Record<string, Row<D>[]>;
declare function dateGroupByFactory<D extends AnyObject = UnknownObject>(options: DateGroupByOptions): (rows: readonly Row<D>[], column: ColumnInstance<D>, options?: DateGroupByOptions) => Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface NumberGroupByOptions {
    thresholds: number[];
}
declare function numberGroupBy<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], column: ColumnInstance<D>, options?: NumberGroupByOptions): Record<string, Row<D>[]>;
declare function numberGroupByFactory<D extends AnyObject = UnknownObject>(options: NumberGroupByOptions): (rows: readonly Row<D>[], column: ColumnInstance<D>, options?: NumberGroupByOptions) => Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

interface TextGroupByValueOptions {
    type: 'value';
    values: string[];
}
interface TextGroupByRegexOptions {
    type: 'regex';
    values: RegExp[];
}
interface TextGroupByStartsWithOptions {
    type: 'startsWith';
    values: string[];
}
declare type TextGroupByOptions = TextGroupByValueOptions | TextGroupByStartsWithOptions | TextGroupByRegexOptions;
declare function textGroupBy<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], column: ColumnInstance<D>, options?: TextGroupByOptions): Record<string, Row<D>[]>;
declare function textGroupByFactory<D extends AnyObject = UnknownObject>(options: TextGroupByOptions): (rows: readonly Row<D>[], column: ColumnInstance<D>, options?: TextGroupByOptions) => Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

declare function categoricalSetGroupBy<D extends AnyObject = UnknownObject>(rows: readonly Row<D>[], column: ColumnInstance<D>): Record<string, Row<D>[]>;

/**
 * @lineup-lite/hooks
 * https://github.com/sgratzl/lineup-lite
 *
 * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>
 */

/**
 * clears a set of categories of small invalid n/a values
 * @param categories
 */
declare function cleanCategories(categories: Set<string | null | undefined>): string[];
interface DeriveCategoricalColumnResult<D extends AnyObject = UnknownObject> {
    type: 'categorical';
    column: Column<D>;
    options?: CategoricalStatsOptions;
}
interface DeriveNumberColumnResult<D extends AnyObject = UnknownObject> {
    type: 'number';
    column: Column<D>;
    options?: NumberStatsOptions;
}
interface DeriveTextColumnResult<D extends AnyObject = UnknownObject> {
    type: 'text';
    column: Column<D>;
    options?: TextStatsOptions;
}
interface DeriveDateColumnResult<D extends AnyObject = UnknownObject> {
    type: 'date';
    column: Column<D>;
    options?: DateStatsOptions;
}
declare type DeriveColumnResult<D extends AnyObject = UnknownObject> = DeriveCategoricalColumnResult<D> | DeriveDateColumnResult<D> | DeriveNumberColumnResult<D> | DeriveTextColumnResult<D>;
/**
 * guesses the column type based on the values
 */
declare function deriveColumn<D extends AnyObject = UnknownObject>(data: D[], accessor: keyof D): DeriveColumnResult<D>;
/**
 * derive the columns within the given data
 * @param data the data array
 * @param columns optional list of column names to generate
 */
declare function deriveColumns<D extends AnyObject = UnknownObject>(data: D[], columns?: (keyof D)[]): (Column<D> & Partial<LineUpLiteColumn<D>>)[];

export { AnyObject, ArrayAxisRenderer, ArrayAxisRendererFactory, ArrayAxisRendererOptions, BarRenderer, BarRendererFactory, BarRendererOptions, BoxPlotArrayRenderer, BoxPlotArrayRendererFactory, BoxPlotArrayRendererOptions, BoxPlotRenderer, BoxPlotRendererFactory, BoxPlotRendererOptions, CategoricalHistogramRenderer, CategoricalHistogramRendererFactory, CategoricalHistogramRendererOptions, CategoricalRenderer, CategoricalRendererFactory, CategoricalRendererOptions, CategoricalSetHistogramRenderer, CategoricalSetHistogramRendererFactory, CategoricalSetHistogramRendererOptions, CategoricalSetRenderer, CategoricalSetRendererFactory, CategoricalSetRendererOptions, ColorRenderer, ColorRendererFactory, DateGroupByGranularity, DateGroupByOptions, DateHistogramRenderer, DateHistogramRendererFactory, DateRenderer, DateRendererFactory, DateRendererOptions, DateSortOptions, DeriveCategoricalColumnResult, DeriveColumnResult, DeriveDateColumnResult, DeriveNumberColumnResult, DeriveTextColumnResult, DivergingBarRenderer, DivergingBarRendererFactory, DivergingBarRendererOptions, GroupValueRenderer, GroupingOptions, GroupingOptionsCellProps, GroupingOptionsProps, GroupingOptionsValue, HeatMap1DRenderer, HeatMap1DRendererFactory, HeatMap1DRendererOptions, HistogramRendererOptions, IndeterminateCheckbox, LineChartRenderer, LineChartRendererFactory, LineChartRendererOptions, LineUpLiteColumn, UseGroupingOptionGroupingFunction as LineUpLiteGroupByFunction, MultiLineChartRenderer, MultiLineChartRendererFactory, NumberArrayWithStats, NumberGroupByOptions, NumberHistogramRenderer, NumberHistogramRendererFactory, NumberHistogramRendererOptions, NumberSortOptions, ProportionalSymbolRenderer, ProportionalSymbolRendererFactory, RowCompareFunction, SortingOptions, SortingOptionsCellProps, SortingOptionsProps, SortingOptionsValue, StackedBarRenderer, StackedBarRendererFactory, StackedBarRendererOptions, StatsAggregateArray, StatsCellProps, StatsProps, StatsType, StatsValue, TextGroupByOptions, TextGroupByRegexOptions, TextGroupByStartsWithOptions, TextGroupByValueOptions, TextRenderer, TextRendererFactory, TextRendererOptions, TextSummaryRenderer, TextSummaryRendererFactory, TextSummaryRendererOptions, USE_EXPAND_COLUMN_I18N_EN, USE_ROW_SELECT_COLUMN_I18N_EN, UnknownObject, UseGroupingOptionsColumnOptions as UseColumnGroupByColumnOptions, UseGroupingOptionGroupingFunction, UseGroupingOptionsColumnOptions, UseGroupingOptionsColumnProps, UseGroupingOptionsInstanceProps, UseGroupingOptionsState, UseRankRowProps, UseRowExpandColumnTableOptions, UseRowRankColumnTableOptions, UseSelectColumnTableOptions, UseSortingOptionsColumnProps, UseSortingOptionsInstanceProps, UseSortingOptionsState, UseStatsColumnOptions, UseStatsColumnProps, UseStatsInstanceProps, UseStatsOptions, UseStatsState, asCategoricalColumn, asCategoricalSetColumn, asColumn, asDateColumn, asDivergingNumberColumn, asNumberBoxPlotColumn, asNumberColumn, asNumbersColumn, asNumbersLineChartColumn, asStackedNumberColumn, asTextColumn, categoricalFilter, categoricalGroupBy, categoricalGroupCompare, categoricalSetCompare, categoricalSetFilter, categoricalSetGroupBy, categoricalSetGroupCompare, categoricalSort, categoricalStats, cleanCategories, columnSpecificGroupByFn, computeArrayNumberStats, computeStackedValue, dateGroupBy, dateGroupByFactory, dateGroupCompare, dateGroupCompareFactory, dateStats, deriveColumn, deriveColumns, isMissing, numberGroupBy, numberGroupByFactory, numberGroupCompare, numberGroupCompareFactory, numberStats, numbersCompare, numbersCompareFactory, rangeFilter, sortCompare, sortSplitter, statsAggregate, statsAggregateArray, textGroupBy, textGroupByFactory, textGroupCompare, textStats, useGroupingOptions, useRowExpandColumn, useRowRankColumn, useRowSelectColumn, useSortingOptions, useStats };
//# sourceMappingURL=index.d.ts.map
